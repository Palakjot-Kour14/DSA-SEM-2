#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the circular linked list
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the list
void insertAtBeginning(Node** headRef, int data) {
    Node* newNode = createNode(data);
    if (*headRef == NULL) {
        *headRef = newNode;
        newNode->next = *headRef;
    } else {
        Node* temp = *headRef;
        while (temp->next != *headRef) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = *headRef;
        *headRef = newNode;
    }
}

// Function to insert a node at the end of the list
void insertAtEnd(Node** headRef, int data) {
    Node* newNode = createNode(data);
    if (*headRef == NULL) {
        *headRef = newNode;
        newNode->next = *headRef;
    } else {
        Node* temp = *headRef;
        while (temp->next != *headRef) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = *headRef;
    }
}

// Function to delete a node from the list
void deleteNode(Node** headRef, int data) {
    if (*headRef == NULL) {
        printf("List is empty!\n");
        return;
    }
    Node* temp = *headRef;
    Node* prev = NULL;
    while (temp->data != data) {
        if (temp->next == *headRef) {
            printf("Element not found in the list!\n");
            return;
        }
        prev = temp;
        temp = temp->next;
    }
    if (temp == *headRef) {
        if (temp->next == *headRef) {
            *headRef = NULL;
        } else {
            prev = *headRef;
            while (prev->next != *headRef) {
                prev = prev->next;
            }
            *headRef = (*headRef)->next;
            prev->next = *headRef;
        }
    } else if (temp->next == *headRef) {
        prev->next = *headRef;
    } else {
        prev->next = temp->next;
    }
    free(temp);
}

// Function to perform linear search on the list
Node* linearSearch(Node* head, int key) {
    Node* temp = head;
    do {
        if (temp->data == key) {
            return temp;
        }
        temp = temp->next;
    } while (temp != head);
    return NULL;
}

// Function to print the list
void printList(Node* head) {
    Node* temp = head;
    if (temp != NULL) {
        do {
            printf("%d ", temp->data);
            temp = temp->next;
        } while (temp != head);
    }
    printf("\n");
}

// Main function for testing
int main() {
    Node* head = NULL;
    int choice, value, key;

    do {
        printf("\n1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Delete node\n");
        printf("4. Search\n");
        printf("5. Print list\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert at the beginning: ");
                scanf("%d", &value);
                insertAtBeginning(&head, value);
                break;
            case 2:
                printf("Enter value to insert at the end: ");
                scanf("%d", &value);
                insertAtEnd(&head, value);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                deleteNode(&head, value);
                break;
            case 4:
                printf("Enter value to search: ");
                scanf("%d", &key);
                if (linearSearch(head, key) != NULL) {
                    printf("%d found in the list.\n", key);
                } else {
                    printf("%d not found in the list.\n", key);
                }
                break;
            case 5:
                printf("Circular Linked List: ");
                printList(head);
                break;
            case 6:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 6);

    return 0;
}
